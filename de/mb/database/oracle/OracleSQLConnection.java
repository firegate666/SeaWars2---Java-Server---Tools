package de.mb.database.oracle;/* * SEP-Projekt WS 2001-2002 -- Questionaire *  * Projektteilnehmer: * Marco Behnke <marco@firegate.de> * Sebastian Davids <sdavids@gmx.de> * Martin Koose <martin@koose-hh.de> *  * Projektbegleitung:  * Prof. Dr. Bernd Kahlbrandt <Bernd.Kahlbrandt@informatik.fh-hamburg.de> *  * Copyright (c)2001 Behnke, Davids & Koose. Alle Rechte vorbehalten. * =========================================================================== */import de.mb.database.SQLAnswerTable;import java.io.IOException;import java.io.OutputStream;import java.io.StringBufferInputStream;import java.sql.SQLException;import java.util.Vector;import oracle.jdbc.OracleConnection;import oracle.jdbc.OraclePreparedStatement;import oracle.jdbc.OracleResultSet;import oracle.jdbc.OracleStatement;import oracle.sql.CLOB;/** * Framework for simple SQL Statements * *@author *@created    November 18, 2001 *@version    1.0 */public class OracleSQLConnection {	private final String CREATE_TABLE = "create table ";	private final String DROP_TABLE = "drop table ";	private final String FROM = " from ";	private final String INSERT_INTO = "insert into ";	private final String ORDER_BY = "order by ";	private final String SELECT = "select ";	private final String SET = "set ";	private final String UPDATE = "update ";	private final String VALUES = " values ";	private final String WHERE = "where ";	private OracleConnection fconnection;	/**	 *  Constructor for the OracleSQLConnection object	 *	 *@param  oraDb             an orcale db connection containing all connection data	 *@exception  SQLException	 */	public OracleSQLConnection(OracleDBConnection oraDb) throws SQLException {		connection(oraDb);	}	/**	 *  Closes the connection to the given Oracle database.	 *	 *@exception  SQLException	 */	public void close() throws SQLException {		fconnection.close();	}	/**	 *  Creates a new table	 *	 *@param  name              new table's name	 *@param  attributes        new table's attributes	 *@return                   Description of the Return Value	 *@exception  SQLException	 *@exception  IllegalArgumentException  is thrown when an illegal table name is or no attributes are given	 */	public boolean createTable(String name, Vector attributes)		throws SQLException, IllegalArgumentException {		if (name.equalsIgnoreCase(""))			throw new IllegalArgumentException("No table name given!");		if (isNotValidSQLName(name))			throw new IllegalArgumentException("The table name given is no valid sql table name!");		if (attributes.size() < 1)			throw new IllegalArgumentException("No attributes to select found!");		// int sizeAttributes = attributes.size();//SD-01-12-03: Not used		String createStatement = CREATE_TABLE + name + buildString(attributes);		return executeSQL(createStatement);	}	/**	 * Tests if the given String is an valid sql table, constraint or attribute name.	 * @param sqlName String to test	 * @return  true if name is not valid	 */	public boolean isNotValidSQLName(String sqlName) {		boolean result = false;		return result;	}	/**	 * Executes the given SQL statement	 * @param   sqlStatement  valid SQL create- or drop-statement	 * @return	 * @exception SQLException	 */	public boolean executeSQL(String sqlStatement) throws SQLException {		boolean result;		OracleStatement stm = (OracleStatement) (fconnection.createStatement());		result = stm.execute(sqlStatement);		stm.close();		return result;	}	/**	 *  Creates a new table	 *	 *@param  name              new table's name	 *@param  attributes        new table's attributes	 *@param  constraints       new table's constraints (not implemented yet)	 *@return                   Description of the Return Value	 *@exception  SQLException	 *@exception  IllegalArgumentException  is thrown when an illegal table name or no attribues to select from is given	 */	public boolean createTable(		String name,		Vector attributes,		Vector constraints)		throws SQLException, IllegalArgumentException {		if (name.equalsIgnoreCase(""))			throw new IllegalArgumentException("No table name given!");		if (isNotValidSQLName(name))			throw new IllegalArgumentException("The table name given is no valid sql table name!");		if (attributes.size() < 1)			throw new IllegalArgumentException("No attributes to select found!");		if (constraints.size() < 1)			return createTable(name, attributes);		//int sizeAttributes = attributes.size();//SD-01-12-03: Not used		String createStatement =			CREATE_TABLE + name + buildString(attributes, constraints);		return executeSQL(createStatement);	}	/**	 *  Deletes a table from database	 *	 *@param  name              table name to delete	 *@return                   Description of the Return Value	 *@exception  SQLException	 *@exception IllegalArgumentException is thrown when name is empty	 */	public boolean dropTable(String name)		throws SQLException, IllegalArgumentException {		if (name.equalsIgnoreCase(""))			throw new IllegalArgumentException("No name can't be a valid table name!");		String dropStatement = DROP_TABLE + name;		return executeSQL(dropStatement);	}	public int insertClob(		String tableName,		String attributeName,		String string)		throws SQLException, IOException {		int result = 0;		CLOB clob = null;		StringBufferInputStream in = new StringBufferInputStream(string);		OutputStream out = clob.getAsciiOutputStream();		int chunk = clob.getChunkSize();		byte[] buffer = new byte[chunk];		int length;		while ((length = in.read(buffer)) != -1)			out.write(buffer, 0, length);		in.close();		String statement =			INSERT_INTO				+ tableName				+ " ("				+ attributeName				+ ")"				+ VALUES				+ "(?)";		OraclePreparedStatement ops =			(OraclePreparedStatement) (fconnection.prepareStatement(statement));		ops.setCLOB(1, clob);		ops.execute();		out.close();		return result;	}	/**	 *  Inserts a data tuple into a table.	 *	 *@param  tableName                     table name to insert into	 *@param  attributes                    attributes that are used	 *@param  values                        values for given attributes	 *@return                               Description of the Return Value	 *@exception  SQLException	 *@exception  IllegalArgumentException  is thrown when attributes and values have not the same size	 */	public int insertInto(String tableName, Vector attributes, Vector values)		throws SQLException, IllegalArgumentException {		if (tableName.equalsIgnoreCase(""))			throw new IllegalArgumentException("No table name given!");		if (attributes.size() != values.size())			throw new IllegalArgumentException("Number given attribues and values must be the same!");		if (attributes.size() < 1)			throw new IllegalArgumentException("No attributes or values given!");		String insertStatement = INSERT_INTO + tableName;		insertStatement += buildString(attributes)			+ VALUES			+ buildString(values);		return executeSQLUpdate(insertStatement);	}	/**	 * Executes the given SQL statement	 * @param   sqlStatement  valid SQL insert- or update-statement	 * @return	 * @exception SQLException	 */	public int executeSQLUpdate(String sqlStatement) throws SQLException {		int result = 0;		OracleStatement stm = (OracleStatement) (fconnection.createStatement());		result = stm.executeUpdate(sqlStatement);		stm.close();		return result;	}	/**	 *  Select data from a table an return a <code>SQLAnswerTable</code> containing the selected data.	 *	 *@param  attributes        attributes to select data from	 *@param  tableNames        table names to select data from	 *@param  whereClause       join clause and excludes/includes	 *@param  orders            sorting flags	 *@return                   <code>SQLAnswerTable</code> containg result data	 *@exception  SQLException	 *@exception  IllegalArgumentException is thrown when no attributes or table names are given or invalid names are used	 */	public SQLAnswerTable selectFrom(		Vector attributes,		Vector tableNames,		String whereClause,		Vector orders)		throws SQLException, IllegalArgumentException {		if (attributes.size() < 1)			throw new IllegalArgumentException("No attributes given!");		if (tableNames.size() < 1)			throw new IllegalArgumentException("No table names given!");		for (int i = 0; i < tableNames.size(); i++)			if (((String) tableNames.get(i)).equalsIgnoreCase(""))				throw new IllegalArgumentException("No table name can't be a valid table name!");		//boolean NoOrders = orders.size() < 1;//SD-01-12-03: Not used		//boolean NoWhereClause = whereClause.equalsIgnoreCase("");//SD-01-12-03: Not used		//SQLAnswerTable result;//SD-01-12-03: Not used		String selectStatement = SELECT;		return executeSQLQuery(selectStatement);	}	/**	 * Executes the given SQL statement	 * @param   sqlStatement  valid SQL select-statement	 * @return  <code>SQLAnswerTable</code> containing the query result	 * @exception SQLException	 */	public SQLAnswerTable executeSQLQuery(String sqlStatement)		throws SQLException {		SQLAnswerTable result;		OracleStatement stm = (OracleStatement) (fconnection.createStatement());		result =			new SQLAnswerTable(				(OracleResultSet) (stm.executeQuery(sqlStatement)));		stm.close();		return result;	}	/**	 *  Builds the paranthesis strings of attributes used in sql statements from given vectors of values.	 *  E.g. (id int, text varchar(20))	 *	 *@param  arguments  Paramters to seperate by comma	 *@return            Complete string	 */	private String buildString(Vector arguments) {		String result = "(";		for (int i = 0; i < arguments.size(); i++) {			result += (String) (arguments.get(i));			if (i < arguments.size() - 1)				result += ", ";			else				result += ")";		}		return result;	}	/**	 * Joins two Vectors of arguments, attributes and constraints for example and calls	 * <code>buildString(Vector)</code> with all arguments.	 *	 * @param   arguments1  Paramters to seperate by comma	 * @param   arguments2  Paramters to seperate by comma	 * @return  Complete String	 */	private String buildString(Vector arguments1, Vector arguments2) {		arguments1.addAll(arguments2);		return buildString(arguments1);	}	/**	 *  Establishes a connection to the oracle db and sets it on instance variable fconnection.	 *  Only used by constructor.	 *	 *@param  oraDb             Description of the Parameter	 *@exception  SQLException  Description of the Exception	 */	private void connection(OracleDBConnection oraDb) throws SQLException {		fconnection = oraDb.connect();	}}